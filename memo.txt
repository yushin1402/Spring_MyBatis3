・URL
http://terasolunaorg.github.io/guideline/5.5.1.RELEASE/ja/Tutorial/TutorialTodo.html#id4


①プロジェクトの作成
mvn archetype:generateを利用して実装するインフラストラクチャ層向けのブランクプロジェクトを作成うる。
※インフラストラクチャ層のアーキタイプ:
	- java.util.Mapを利用したインメモリ実装のRepositoryImple
	- MyBatis3を使用してデータベースアクセスするRepositoryImple
	- Spring Data JPAを使用してデータベースにアクセスするRepositoryImple

ここでは、MyBatis3を利用したブランクプロジェクトを作成する。

【MVNコマンド】
mvn archetype:generate -B\
 -DarchetypeGroupId=org.terasoluna.gfw.blank\
 -DarchetypeArtifactId=terasoluna-gfw-web-blank-mybatis3-archetype\
 -DarchetypeVersion=5.5.1.RELEASE\
 -DgroupId=com.example.todo\
 -DartifactId=todo\
 -Dversion=1.0.0-SNAPSHOT

②プロジェクトのインポート: 
	- 作成したブランクプロジェクトをSTSへインポートする。
	  [File] -> [インポート] -> [Maven] -> [既存Mavenプロジェクト] -> [次へ]
	- ルートディレクトリに作成したブランクプロジェクトを設定し完了する。
	  C:\study\spring\terasolunaチュートリアル\todo
	- パッケージエクスプローラーにtodoプロジェクトがインポートされたことを確認する。

	※既にtodoプロジェクトが存在するというエラーとなった場合は、workspaceを切り替えてからインポートすること。
	 今回は新たにC:\sts-4.12.0.RELEASE-workspace-todo_MyBatis3を作成してworkspaceとした。
	 
③デバッグサーバとしてtomcat9を設定(todo_mapでインストール済みの前提)
	- ファイル→新規→その他→サーバ→次へ→Apache Tomcat 9.0サーバ→tomcatインストールディレクトリ(C:\apache-tomcat-9.0.46)
	  →全て追加→完了

④pom.xmlのwarプラグインのバージョンを3.3.2に修正(非互換回避)
          <maven-war-plugin.version>3.3.2</maven-war-plugin.version> 

⑤デバッグサーバの起動に成功したらGitHubに一旦登録:
	 - https://github.com/で新しいリポジトリを作成する。(右上の+ボタンの nwe repogitory)
	 - cd /c/study/spring/terasolunaチュートリアル/todo_myBatis3
	 - echo "# Study Spring" >> README.md
	 - git add .
	 - git commit -m "first commit"
	 - git remote add origin git@github.com:yushin1402/Spring_MyBatis3.git
	 - git push -u origin master

※ローカルをリモートの状態に復元したいときはgit reset --hard origin/masterを実行

⑥todo_mapで作成したソースの移植
	以下をtodo_mapからコピー:
		- C:\study\spring\terasolunaチュートリアル\todo_map\src\main\java\com\example\todo\app\todo
		- C:\study\spring\terasolunaチュートリアル\todo_map\src\main\java\com\example\todo\domain\model\Todo.java
		- C:\study\spring\terasolunaチュートリアル\todo_map\src\main\java\com\example\todo\domain\repository\todo
		- C:\study\spring\terasolunaチュートリアル\todo_map\src\main\java\com\example\todo\domain\service\todo
		- C:\study\spring\terasolunaチュートリアル\todo_map\src\main\webapp\WEB-INF\views\todo
⑦データベースのセットアップ:
	H2 Database上にテーブルが作成されるようにするために、 src/main/resources/META-INF/spring/todo-infra.properties:
		- database.url=jdbc:h2:mem:todo;DB_CLOSE_DELAY=-1;INIT=create table if not exists todo(todo_id varchar(36) primary key, todo_title varchar(30), finished boolean, created_at timestamp)
	Repositoryの作成:
		- TodoRepositoryはtodo_mapと同じでOK
		- TodoRepositoryImpleはTodoRepositoryのインターフェースから自動生成されるため作成不要
	Mapperの作成:
		- todoRepositoryとTodoRepository.xmlをmapperタグのnamespace要素でマッピングする。
		- resultMapタグで検索結果とJavaBeanのマッピングを行う。
		  columにデータベースの列名を記述し、propertyにmodelのプロパティ名を記述することでマッピングする。
		  これにより、検索結果が自動でmodelに格納され、そのままviewに渡すことが出来る。
		- 以降はselectタグなどでSQLを定義する。各タグでidを定義し、todoRepositoryのメソッド名とマッピングする。
		  また、resultMapを定義し、modelとの紐づけを設定する。
		  また、parameterTypeには戻りの型を設定する。
	動作確認: 
		- list.jspをコピーしてなかったのでNotFoundが発生したが、list.jspを格納してうまくいった。
